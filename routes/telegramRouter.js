// Fichier : routes/telegramRouter.js

// --- üì¶ Modules & Librairies üì¶ ---
const { Markup } = require('telegraf'); // N'initialisez pas le bot ici
const { v4: uuidv4 } = require('uuid');
const path = require('path');
const fs = require('fs/promises');
const Groq = require('groq-sdk');
const { GoogleGenerativeAI } = require('@google/generative-ai');


// --- ‚ö†Ô∏è Fonctions et variables globales ‚ö†Ô∏è ---
// IMPORTANT : Les fonctions de lecture/√©criture de fichiers JSON doivent √™tre d√©plac√©es
// dans un module utilitaire commun pour √©viter la duplication et centraliser les donn√©es.
const STATS_FILE = path.join(__dirname, '..', 'data', 'stats.json');
const ORGANIZER_GROUP_ID = "https://ia-local.github.io/Manifest.910-2025"; 

async function readJsonFile(filePath, defaultValue = {}) {
    try {
        const data = await fs.readFile(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            await fs.writeFile(filePath, JSON.stringify(defaultValue, null, 2), 'utf8');
            return defaultValue;
        }
        console.error(`Erreur de lecture du fichier ${filePath}:`, error);
        return defaultValue;
    }
}
async function writeJsonFile(filePath, data) {
    try {
        await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf8');
    } catch (error) {
        console.error(`Erreur d'√©criture du fichier ${filePath}:`, error);
    }
}
async function getGroqChatResponse(promptInput, model, systemMessageContent) {
    // La logique de la fonction
    try {
        const messages = [];
        if (systemMessageContent) { messages.push({ role: 'system', content: systemMessageContent }); }
        messages.push({ role: 'user', content: promptInput });
        const chatCompletion = await new Groq({ apiKey: process.env.GROQ_API_KEY }).chat.completions.create({ messages: messages, model: model, temperature: 0.7, max_tokens: 2048 });
        return chatCompletion.choices[0].message.content;
    } catch (error) {
        console.error(`Erreur lors de la g√©n√©ration de la r√©ponse IA (Groq model: ${model}):`, error);
        return 'Une erreur est survenue lors du traitement de votre demande. Veuillez r√©essayer plus tard.';
    }
}
async function getDestitutionInfoMarkdown() {
    return `**La Proc√©dure de Destitution : L'Article 68 de la Constitution**
\nL'Article 68 de la Constitution fran√ßaise pr√©voit la possibilit√© de destituer le Pr√©sident de la R√©publique en cas de manquement √† ses devoirs manifestement incompatible avec l'exercice de son mandat.
\n https://petitions.assemblee-nationale.fr/initiatives/i-2743
\n\nNotre mouvement demande une application rigoureuse et transparente de cet article, et la mise en place de m√©canismes citoyens pour initier et suivre cette proc√©dure.
\nPour le moment, nous recueillons les avis et les soutiens via des sondages et des discussions au sein du bot.
`;
}
async function getRicInfoMarkdown() {
    return `**Le R√©f√©rendum d'Initiative Citoyenne (RIC) : Le C≈ìur de notre D√©mocratie !**
Le RIC est l'outil essentiel pour redonner le pouvoir aux citoyens. Il se d√©cline en plusieurs formes :
\n* **RIC L√©gislatif :** Proposer et voter des lois.
\n* **RIC Abrogatoire :** Annuler une loi existante.
\n* **RIC Constituant :** Modifier la Constitution.
\n* **RIC R√©vocatoire :** Destituer un √©lu.
\n\nC'est la garantie que notre voix sera directement entendue et respect√©e.
\nNous organisons des sondages r√©guliers et des d√©bats au sein du bot pour recueillir votre opinion et votre soutien sur le RIC. Utilisez la commande /sondage pour participer !
`;
}
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// --- ü§ñ Exportation de la logique du Bot ü§ñ ---
// Nous exportons une fonction qui prend l'instance du bot en argument
// et y attache tous les gestionnaires d'√©v√©nements (commandes, actions, etc.).
module.exports = (botInstance) => {

    // --- ü§ñ Commandes et Actions du Bot Telegram ü§ñ ---
    botInstance.start(async (ctx) => {
        const payload = ctx.startPayload;
        let welcomeMessage = `Bonjour citoyen(ne) ! üëã\n\nBienvenue dans l'espace de mobilisation pour la **Gr√®ve G√©n√©rale du 10 Septembre 2025** et la **Justice Sociale** ! Je suis votre assistant pour le mouvement.`;
        if (payload) { welcomeMessage += `\n\nVous √™tes arriv√© via un lien d'invitation : \`${payload}\`. Merci de rejoindre notre cause !`; }
        welcomeMessage += `\n\nComment puis-je vous aider √† vous informer et √† vous engager ?`;
        const inlineKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üìú Le Manifeste', 'show_manifest')],
            [Markup.button.callback('üó≥Ô∏è S\'engager (RIC/P√©titions)', 'engage_menu')],
            [Markup.button.callback('‚ùì Aide & Commandes', 'show_help')]
        ]);
        await ctx.replyWithMarkdown(welcomeMessage, inlineKeyboard);
    });

    // ... Le reste des commandes, actions et 'on' listeners ...
    // Note: Utiliser 'botInstance' partout o√π vous aviez 'bot'
    botInstance.action('start_menu', async (ctx) => { await ctx.answerCbQuery(); await botInstance.start(ctx); });
    botInstance.action('show_manifest', async (ctx) => {
        await ctx.answerCbQuery();
        const manifestoContent = `**Extrait du Manifeste 'Le 10 Septembre' :**
    Notre mouvement est n√© de la conviction que la R√©publique doit retrouver ses valeurs de justice sociale, de d√©mocratie directe et de transparence. Nous exigeons :
    \n1.  **L'instauration du R√©f√©rendum d'Initiative Citoyenne (RIC)** dans toutes ses formes (l√©gislatif, abrogatoire, constituant, r√©vocatoire).
    \n2.  **La mise en ≈ìuvre de la proc√©dure de destitution** des √©lus, notamment pr√©sidentielle, en cas de manquement grave √† leurs devoirs, conform√©ment √† l'Article 68 de la Constitution.
    \n3.  **Une refonte du syst√®me fiscal** pour une plus grande √©quit√© et une contribution juste de chacun.
    \n4.  **Une v√©ritable transition √©cologique** qui ne laisse personne de c√¥t√©, financ√©e par la justice fiscale.
    \n5.  **La fin de l'impunit√©** et la responsabilisation des √©lites √©conomiques et politiques.
    \n\nPour le manifeste complet et toutes nos propositions, interrogez l'IA ou explorez les commandes /manifeste, /ric, /destitution.
    `; 
        await ctx.replyWithMarkdown(manifestoContent);
    });
    // ... et ainsi de suite pour toutes les autres commandes et actions.
    
    // Ajoutez le reste de votre code ici, en rempla√ßant 'bot.' par 'botInstance.'
    
    botInstance.command('stats', async (ctx) => {
        const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
        const statsMessage = `üìä Statistiques d'utilisation du bot :\nTotal de messages trait√©s : ${stats.totalMessages}`;
        await ctx.reply(statsMessage);
    });

    botInstance.command('imagine', async (ctx) => {
        const topic = ctx.message.text.split(' ').slice(1).join(' ');
        if (!topic) {
            await ctx.reply('Veuillez fournir une description pour l\'image. Exemple: /imagine un dragon survolant une ville futuriste');
            return;
        }
        try {
            await ctx.replyWithChatAction('upload_photo');
            await ctx.reply('‚è≥ G√©n√©ration de l\'image en cours... Cela peut prendre un moment.');
            const imageDescription = await new Groq({ apiKey: process.env.GROQ_API_KEY }).chat.completions.create({
                messages: [{ role: 'user', content: `D√©cris une image qui illustre le th√®me suivant : ${topic}. La description doit √™tre suffisamment d√©taill√©e pour g√©n√©rer une image pertinente.` }],
                model: 'gemma2-9b-it'
            }).then(res => res.choices[0].message.content);
            
            const model = new GoogleGenerativeAI(process.env.GEMINI_API_KEY).getGenerativeModel({ model: 'gemini-2.5-flash-image-preview' });
            const result = await model.generateContent(imageDescription);
            const response = result.response;
            const parts = response.candidates[0].content.parts;
            
            for (const part of parts) {
                if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
                    const imageData = part.inlineData.data;
                    const imageBuffer = Buffer.from(imageData, 'base64');
                    await ctx.replyWithPhoto({ source: imageBuffer });
                    return;
                }
            }
            await ctx.reply('D√©sol√©, l\'IA a g√©n√©r√© une r√©ponse sans image. Veuillez r√©essayer avec une autre description.');
        } catch (error) {
            console.error('Erreur lors de la g√©n√©ration de l\'image (Telegram):', error);
            await ctx.reply('D√©sol√©, une erreur est survenue lors de la g√©n√©ration de l\'image. Le mod√®le a pu √©chouer ou la description √©tait trop complexe.');
        }
    });

    botInstance.on('text', async (ctx) => {
        try {
            const stats = await readJsonFile(STATS_FILE, { totalMessages: 0 });
            stats.totalMessages = (stats.totalMessages || 0) + 1;
            await writeJsonFile(STATS_FILE, stats);
        } catch (error) {
            console.error('Erreur lors de la mise √† jour du compteur de messages:', error);
        }
        
        if (ctx.message.text.startsWith('/')) { return; }
        await ctx.replyWithChatAction('typing');
        try {
            const userMessage = ctx.message.text;
            const aiResponse = await getGroqChatResponse(userMessage, 'gemma2-9b-it', "Vous √™tes un assistant utile et informatif pour un tableau de bord de manifestation. Vous r√©pondez aux questions sur le mouvement.");
            await ctx.reply(aiResponse);
        } catch (error) {
            console.error('√âchec de la g√©n√©ration de la r√©ponse IA (Telegram) avec gemma2-9b-it:', error);
            await ctx.reply('Une erreur est survenue lors du traitement de votre demande de conversation IA. Veuillez v√©rifier la configuration de l\'IA ou r√©essayer plus tard.');
        }
    });

    botInstance.command('contact', async (ctx) => {
        const messageContent = ctx.message.text.split(' ').slice(1).join(' ');
        if (!messageContent) { await ctx.reply('Veuillez fournir le message que vous souhaitez envoyer aux organisateurs. Exemple: /contact J\'ai une id√©e pour la gr√®ve.'); return; }
        if (ORGANIZER_GROUP_ID) {
            try {
                await botInstance.telegram.sendMessage(ORGANIZER_GROUP_ID, `Nouveau message de l'utilisateur ${ctx.from.first_name} (${ctx.from.username || 'ID: ' + ctx.from.id}) :\n\n${messageContent}`);
                await ctx.reply('Votre message a √©t√© transmis aux organisateurs. Merci !');
            } catch (error) {
                console.error('Erreur lors de l\'envoi du message aux organisateurs:', error);
                await ctx.reply('D√©sol√©, je n\'ai pas pu transmettre votre message aux organisateurs. Veuillez r√©essayer plus tard.');
            }
        } else {
            await ctx.reply('Le canal de contact des organisateurs n\'est pas configur√©. Veuillez contacter l\'administrateur du bot.');
        }
    });
};